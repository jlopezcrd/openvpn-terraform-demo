resource "aws_security_group" "kaira_openvpn_nlb_sg" {
  tags = {
    Name = "kaira-nlb-sg-openvpn"
  }

  name        = "kaira-nlb-sg-openvpn"
  description = "Rules for openvpn service"

  vpc_id = data.aws_vpc.kaira_aws_vpc.id

  ingress {
    from_port   = var.kaira_container_port
    to_port     = var.kaira_container_port
    protocol    = "UDP"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = -1
    cidr_blocks = ["0.0.0.0/0"]
  }
}

resource "aws_security_group" "kaira_openvpn_ecs_sg" {
  tags = {
    Name = "kaira-ecs-sg-openvpn"
  }

  name        = "kaira-ecs-sg-openvpn"
  description = "Rules for openvpn service"

  vpc_id = data.aws_vpc.kaira_aws_vpc.id

  ingress {
    from_port   = var.kaira_container_port
    to_port     = var.kaira_container_port
    protocol    = "UDP"
    security_groups = [ aws_security_group.kaira_openvpn_nlb_sg.id ]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = -1
    cidr_blocks = ["0.0.0.0/0"]
  }
}

# resource "aws_lb" "kaira_external_nlb" {
#   tags = {
#     Name = "kaira-external-nlb",
#   }

#   name                             = "kaira-external-nlb"
#   load_balancer_type               = "network"
#   enable_cross_zone_load_balancing = "true"

#   internal = false
#   subnets  = [
#     data.aws_subnet.kaira_aws_subnet_a.id,
#     data.aws_subnet.kaira_aws_subnet_b.id,
#     data.aws_subnet.kaira_aws_subnet_c.id
#   ]

#   security_groups = [ aws_security_group.kaira_openvpn_nlb_sg.id ]
# }

# resource "aws_lb_target_group" "kaira_external_nlb_tg" {
#   tags = {
#     Name = "kaira-external-nlb-tg",
#   }

#   name                 = "kaira-external-nlb-tg"
#   port                 = var.kaira_container_port
#   protocol             = "UDP"
#   vpc_id               = data.aws_vpc.kaira_aws_vpc.id
#   target_type          = "ip"
#   deregistration_delay = 30

#   health_check {
#     protocol            = "UDP"
#     interval            = 30
#     healthy_threshold   = 5
#     unhealthy_threshold = 5
#   }
# }

# resource "aws_lb_listener" "kaira_nlb_listener" {
#   load_balancer_arn = aws_lb.kaira_external_nlb.id
#   port              = var.kaira_container_port
#   protocol          = "UDP"

#   default_action {
#     target_group_arn = aws_lb_target_group.kaira_external_nlb_tg.id
#     type             = "forward"
#   }  
# }

# resource "aws_iam_role" "kaira_ecs_agent_role" {
#   name               = "kaira-ecs-agent-role"
#   assume_role_policy = data.aws_iam_policy_document.kaira_ecs_agent.json
# }

# resource "aws_iam_role_policy_attachment" "kaira_ecs_agent_attachment" {
#   role       = aws_iam_role.kaira_ecs_agent_role.name
#   policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"
# }

# resource "aws_iam_instance_profile" "kaira_ecs_agent_profile" {
#   name = "kaira-ecs-agent-profile"
#   role = aws_iam_role.kaira_ecs_agent_role.name
# }

# resource "aws_launch_template" "kaira_ecs_lt" {
#   name_prefix   = "kaira-ecs-template"
#   image_id      = "ami-062c116e449466e7f"
#   instance_type = "t3.micro"

#   key_name               = "ec2ecsglog"
#   vpc_security_group_ids = [aws_security_group.kaira_openvpn_nlb_sg]
  
#   iam_instance_profile {
#     name = "ecsInstanceRole"
#   }

#   block_device_mappings {
#     device_name = "/dev/xvda"
#     ebs {
#       volume_size = 30
#       volume_type = "gp2"
#     }
#   }

#   tag_specifications {
#     resource_type = "instance"
#     tags = {
#       Name = "kaira-ecs-instance"
#     }
#   }

#   user_data = "#!/bin/bash\necho ECS_CLUSTER=kaira-ecs-cluster >> /etc/ecs/ecs.config"
# }

# resource "aws_launch_configuration" "ecs_launch_config" {
#   image_id             = "ami-094d4d00fd7462815"
#   iam_instance_profile = aws_iam_instance_profile.ecs_agent.name
#   security_groups      = [aws_security_group.ecs_sg.id]
#   user_data            = "#!/bin/bash\necho ECS_CLUSTER=kaira-ecs-cluster >> /etc/ecs/ecs.config"
#   instance_type        = "t2.micro"
# }

# resource "aws_autoscaling_group" "kaira_ecs_asg" {
#   tag {
#     key                 = "AmazonECSManaged"
#     value               = true
#     propagate_at_launch = true
#   }
#   name                      = "asg"
#   vpc_zone_identifier       = [
#     aws_subnet.data.aws_subnet.kaira_aws_subnet_a.id,
#     aws_subnet.data.aws_subnet.kaira_aws_subnet_b.id,
#     aws_subnet.data.aws_subnet.kaira_aws_subnet_c.id,
#   ]
  
#   #launch_configuration = aws_launch_configuration.ecs_launch_config.name
#   launch_template {
#     id      = aws_launch_template.kaira_ecs_lt.id
#     version = "$Latest"
#   }

#   desired_capacity          = 2
#   min_size                  = 1
#   max_size                  = 10
#   health_check_grace_period = 300
#   health_check_type         = "EC2"
# }

# resource "aws_ecs_capacity_provider" "kaira_ecs_capacity_provider" {
#   name = "kaira-esc-capacity"

#   auto_scaling_group_provider {
#     auto_scaling_group_arn = aws_autoscaling_group.kaira_ecs_asg.arn

#     managed_scaling {
#       maximum_scaling_step_size = 1000
#       minimum_scaling_step_size = 1
#       status                    = "ENABLED"
#       target_capacity           = 3
#     }
#   }
# }

# resource "aws_ecs_cluster_capacity_providers" "example" {
#  cluster_name = aws_ecs_cluster.ecs_cluster.name

#  capacity_providers = [aws_ecs_capacity_provider.ecs_capacity_provider.name]

#  default_capacity_provider_strategy {
#    base              = 1
#    weight            = 100
#    capacity_provider = aws_ecs_capacity_provider.ecs_capacity_provider.name
#  }
# }

resource "aws_ecs_cluster" "kaira_ecs_cluster" {
  tags = {
    Name = "kaira-ecs-cluster",
  }

  name = "kaira-ecs-cluster"

  setting {
    name  = "containerInsights"
    value = "enabled"
  }
}

resource "aws_ecs_task_definition" "kaira_openvpn_task" {
  tags = {
    Name = "kaira-openvpn-task",
  }

  family                   = "service"
  network_mode             = "awsvpc"
  requires_compatibilities = ["EC2"]
  cpu                      = 512
  memory                   = 1024
  execution_role_arn       = data.aws_iam_role.kaira_ecs_task_execution_role.arn

  container_definitions = jsonencode([
    {
      name: var.kaira_container_name,
      image: "366007218587.dkr.ecr.eu-south-2.amazonaws.com/kaira-ecr:latest", //"nginx:1.23.1",
      cpu: 512,
      memory: 1024,
      essential: true,
      portMappings: [
        {
          containerPort: var.kaira_container_port,
          hostPort: var.kaira_container_port,
          protocol: "UDP"
        },
      ],
      linuxParameters: {
        capabilities: {
          add: [ "NET_ADMIN" ]
        }
      },
      environment: [
        {
          name: "DEBUG",
          value: "1"
        }
      ]
    }
  ])
}

resource "aws_ecs_service" "kaira_openvpn_service" {
  #depends_on = [ aws_lb.kaira_external_nlb ] //TODO

  tags = {
    Name = "kaira-openvpn-service",
  }

  name             = "openvpn-service"
  cluster          = aws_ecs_cluster.kaira_ecs_cluster.id
  task_definition  = aws_ecs_task_definition.kaira_openvpn_task.arn
  desired_count    = 1
  launch_type      = "EC2"
  #platform_version = "LATEST"

  network_configuration {
    assign_public_ip = false
    security_groups  = [
      aws_security_group.kaira_openvpn_nlb_sg.id, //TODO
      aws_security_group.kaira_openvpn_ecs_sg.id
    ]
    subnets          = [
      data.aws_subnet.kaira_aws_subnet_a.id,
      data.aws_subnet.kaira_aws_subnet_b.id,
      data.aws_subnet.kaira_aws_subnet_c.id
    ]
  }

  # load_balancer {
  #   target_group_arn = aws_lb_target_group.kaira_external_nlb_tg.arn
  #   container_name = var.kaira_container_name
  #   container_port = var.kaira_container_port
  # }

  force_new_deployment = true

  # lifecycle {
  #   ignore_changes = [task_definition]
  # }

  triggers = {
    redeployment = timestamp()
  }
}